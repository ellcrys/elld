package common

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Schema", func() {

	Describe(".EncodeBlockNumber", func() {
		It("should encode numbers", func() {
			Expect(EncodeBlockNumber(1)).To(Equal([]byte{0, 0, 0, 0, 0, 0, 0, 1}))
			Expect(EncodeBlockNumber(100)).To(Equal([]byte{0, 0, 0, 0, 0, 0, 0, 100}))
		})
	})

	Describe(".DecodeBlockNumber", func() {
		It("should decode numbers", func() {
			Expect(DecodeBlockNumber([]byte{0, 0, 0, 0, 0, 0, 0, 1})).To(Equal(uint64(1)))
			Expect(DecodeBlockNumber([]byte{0, 0, 0, 0, 0, 0, 0, 100})).To(Equal(uint64(100)))
		})
	})

	Describe(".MakeAccountKey", func() {
		It("should return expected key", func() {
			k := MakeAccountKey(10, []byte("chainA"), []byte("some_addr"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x61, 0x63, 0x63, 0x6f, 0x75,
				0x6e, 0x74, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x24, 0x24, 0x5f, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
			}))
		})
	})

	Describe(".QueryAccountKey", func() {
		It("should return expected key", func() {
			k := QueryAccountKey([]byte("chainA"), []byte("some_addr"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x61, 0x63, 0x63, 0x6f, 0x75,
				0x6e, 0x74, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
			}))
		})
	})

	Describe(".MakeBlockchainMetadataKey", func() {
		It("should return expected key", func() {
			k := MakeBlockchainMetadataKey()
			Expect(k).To(Equal([]uint8{
				0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x6d, 0x65, 0x74, 0x61,
			}))
		})
	})

	Describe(".MakeBlockKey", func() {
		It("should return expected key", func() {
			k := MakeBlockKey([]byte("chainA"), 10)
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
				0x5f, 0x24, 0x24, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
			}))
		})
	})

	Describe(".MakeBlocksQueryKey", func() {
		It("should return expected key", func() {
			k := MakeBlocksQueryKey([]byte("chainA"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
			}))
		})
	})

	Describe(".MakeChainKey", func() {
		It("should return expected key", func() {
			k := MakeChainKey([]byte("chainA"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x24, 0x24, 0x5f, 0x63, 0x68, 0x61,
				0x69, 0x6e, 0x41,
			}))
		})
	})

	Describe(".MakeChainsQueryKey", func() {
		It("should return expected key", func() {
			k := MakeChainsQueryKey()
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
			}))
		})
	})

	Describe(".MakeTxKey", func() {
		It("should return expected key", func() {
			k := MakeTxKey([]byte("chainA"), 221, []byte("tx123"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x78, 0x74, 0x78, 0x31,
				0x32, 0x33, 0x5f, 0x24, 0x24, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd,
			}))
		})
	})

	Describe(".MakeTxQueryKey", func() {
		It("should return expected key", func() {
			k := MakeTxQueryKey([]byte("chainA"), []byte("tx123"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x78, 0x74, 0x78, 0x31,
				0x32, 0x33,
			}))
		})
	})

	Describe(".MakeTreeKey", func() {
		It("should return expected key", func() {
			k := MakeTreeKey(10, ObjectTypeAccount)
			Expect(k).To(Equal([]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
			}))
		})
	})
})
