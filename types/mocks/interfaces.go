// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "github.com/ellcrys/elld/crypto"
	elldb "github.com/ellcrys/elld/elldb"
	types "github.com/ellcrys/elld/types"
	util "github.com/ellcrys/elld/util"
	merkletree "github.com/ellcrys/merkletree"
	gomock "github.com/golang/mock/gomock"
	emitter "github.com/olebedev/emitter"
	big "math/big"
	reflect "reflect"
)

// MockChainer is a mock of Chainer interface
type MockChainer struct {
	ctrl     *gomock.Controller
	recorder *MockChainerMockRecorder
}

// MockChainerMockRecorder is the mock recorder for MockChainer
type MockChainerMockRecorder struct {
	mock *MockChainer
}

// NewMockChainer creates a new mock instance
func NewMockChainer(ctrl *gomock.Controller) *MockChainer {
	mock := &MockChainer{ctrl: ctrl}
	mock.recorder = &MockChainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainer) EXPECT() *MockChainerMockRecorder {
	return m.recorder
}

// GetStore mocks base method
func (m *MockChainer) GetStore() types.ChainStorer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(types.ChainStorer)
	return ret0
}

// GetStore indicates an expected call of GetStore
func (mr *MockChainerMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockChainer)(nil).GetStore))
}

// NewStateTree mocks base method
func (m *MockChainer) NewStateTree(opts ...types.CallOp) (types.Tree, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStateTree", varargs...)
	ret0, _ := ret[0].(types.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStateTree indicates an expected call of NewStateTree
func (mr *MockChainerMockRecorder) NewStateTree(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStateTree", reflect.TypeOf((*MockChainer)(nil).NewStateTree), opts...)
}

// Current mocks base method
func (m *MockChainer) Current(opts ...types.CallOp) (types.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Current", varargs...)
	ret0, _ := ret[0].(types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current
func (mr *MockChainerMockRecorder) Current(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockChainer)(nil).Current), opts...)
}

// GetID mocks base method
func (m *MockChainer) GetID() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockChainerMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockChainer)(nil).GetID))
}

// GetBlock mocks base method
func (m *MockChainer) GetBlock(arg0 uint64, arg1 ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainerMockRecorder) GetBlock(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainer)(nil).GetBlock), varargs...)
}

// GetParentBlock mocks base method
func (m *MockChainer) GetParentBlock() types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentBlock")
	ret0, _ := ret[0].(types.Block)
	return ret0
}

// GetParentBlock indicates an expected call of GetParentBlock
func (mr *MockChainerMockRecorder) GetParentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentBlock", reflect.TypeOf((*MockChainer)(nil).GetParentBlock))
}

// GetInfo mocks base method
func (m *MockChainer) GetInfo() types.ChainInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(types.ChainInfo)
	return ret0
}

// GetInfo indicates an expected call of GetInfo
func (mr *MockChainerMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockChainer)(nil).GetInfo))
}

// CreateAccount mocks base method
func (m *MockChainer) CreateAccount(targetBlockNum uint64, account types.Account, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{targetBlockNum, account}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockChainerMockRecorder) CreateAccount(targetBlockNum, account interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{targetBlockNum, account}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockChainer)(nil).CreateAccount), varargs...)
}

// GetAccount mocks base method
func (m *MockChainer) GetAccount(address util.String, opts ...types.CallOp) (types.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockChainerMockRecorder) GetAccount(address interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockChainer)(nil).GetAccount), varargs...)
}

// PutTransactions mocks base method
func (m *MockChainer) PutTransactions(txs []types.Transaction, blockNumber uint64, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{txs, blockNumber}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTransactions indicates an expected call of PutTransactions
func (mr *MockChainerMockRecorder) PutTransactions(txs, blockNumber interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txs, blockNumber}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTransactions", reflect.TypeOf((*MockChainer)(nil).PutTransactions), varargs...)
}

// GetTransaction mocks base method
func (m *MockChainer) GetTransaction(hash util.Hash, opts ...types.CallOp) (types.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockChainerMockRecorder) GetTransaction(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockChainer)(nil).GetTransaction), varargs...)
}

// ChainReader mocks base method
func (m *MockChainer) ChainReader() types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainReader")
	ret0, _ := ret[0].(types.ChainReaderFactory)
	return ret0
}

// ChainReader indicates an expected call of ChainReader
func (mr *MockChainerMockRecorder) ChainReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainReader", reflect.TypeOf((*MockChainer)(nil).ChainReader))
}

// GetRoot mocks base method
func (m *MockChainer) GetRoot() types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(types.Block)
	return ret0
}

// GetRoot indicates an expected call of GetRoot
func (mr *MockChainerMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockChainer)(nil).GetRoot))
}

// MockChainStorer is a mock of ChainStorer interface
type MockChainStorer struct {
	ctrl     *gomock.Controller
	recorder *MockChainStorerMockRecorder
}

// MockChainStorerMockRecorder is the mock recorder for MockChainStorer
type MockChainStorerMockRecorder struct {
	mock *MockChainStorer
}

// NewMockChainStorer creates a new mock instance
func NewMockChainStorer(ctrl *gomock.Controller) *MockChainStorer {
	mock := &MockChainStorer{ctrl: ctrl}
	mock.recorder = &MockChainStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainStorer) EXPECT() *MockChainStorerMockRecorder {
	return m.recorder
}

// PutBlock mocks base method
func (m *MockChainStorer) PutBlock(block types.Block, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{block}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBlock", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock
func (mr *MockChainStorerMockRecorder) PutBlock(block interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{block}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockChainStorer)(nil).PutBlock), varargs...)
}

// GetBlock mocks base method
func (m *MockChainStorer) GetBlock(number uint64, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{number}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainStorerMockRecorder) GetBlock(number interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{number}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainStorer)(nil).GetBlock), varargs...)
}

// GetBlockByHash mocks base method
func (m *MockChainStorer) GetBlockByHash(hash util.Hash, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHash", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockChainStorerMockRecorder) GetBlockByHash(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockChainStorer)(nil).GetBlockByHash), varargs...)
}

// GetBlockByNumberAndHash mocks base method
func (m *MockChainStorer) GetBlockByNumberAndHash(number uint64, hash util.Hash, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{number, hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByNumberAndHash", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumberAndHash indicates an expected call of GetBlockByNumberAndHash
func (mr *MockChainStorerMockRecorder) GetBlockByNumberAndHash(number, hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{number, hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumberAndHash", reflect.TypeOf((*MockChainStorer)(nil).GetBlockByNumberAndHash), varargs...)
}

// GetHeader mocks base method
func (m *MockChainStorer) GetHeader(number uint64, opts ...types.CallOp) (types.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{number}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeader", varargs...)
	ret0, _ := ret[0].(types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockChainStorerMockRecorder) GetHeader(number interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{number}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChainStorer)(nil).GetHeader), varargs...)
}

// GetHeaderByHash mocks base method
func (m *MockChainStorer) GetHeaderByHash(hash util.Hash, opts ...types.CallOp) (types.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeaderByHash", varargs...)
	ret0, _ := ret[0].(types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockChainStorerMockRecorder) GetHeaderByHash(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChainStorer)(nil).GetHeaderByHash), varargs...)
}

// GetTransaction mocks base method
func (m *MockChainStorer) GetTransaction(hash util.Hash, opts ...types.CallOp) (types.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockChainStorerMockRecorder) GetTransaction(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockChainStorer)(nil).GetTransaction), varargs...)
}

// CreateAccount mocks base method
func (m *MockChainStorer) CreateAccount(targetBlockNum uint64, account types.Account, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{targetBlockNum, account}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockChainStorerMockRecorder) CreateAccount(targetBlockNum, account interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{targetBlockNum, account}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockChainStorer)(nil).CreateAccount), varargs...)
}

// GetAccount mocks base method
func (m *MockChainStorer) GetAccount(address util.String, opts ...types.CallOp) (types.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockChainStorerMockRecorder) GetAccount(address interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockChainStorer)(nil).GetAccount), varargs...)
}

// GetAccounts mocks base method
func (m *MockChainStorer) GetAccounts(opts ...types.CallOp) ([]types.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccounts", varargs...)
	ret0, _ := ret[0].([]types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockChainStorerMockRecorder) GetAccounts(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockChainStorer)(nil).GetAccounts), opts...)
}

// PutTransactions mocks base method
func (m *MockChainStorer) PutTransactions(txs []types.Transaction, blockNumber uint64, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{txs, blockNumber}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTransactions indicates an expected call of PutTransactions
func (mr *MockChainStorerMockRecorder) PutTransactions(txs, blockNumber interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txs, blockNumber}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTransactions", reflect.TypeOf((*MockChainStorer)(nil).PutTransactions), varargs...)
}

// PutMinedBlock mocks base method
func (m *MockChainStorer) PutMinedBlock(block types.Block, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{block}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMinedBlock", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMinedBlock indicates an expected call of PutMinedBlock
func (mr *MockChainStorerMockRecorder) PutMinedBlock(block interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{block}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMinedBlock", reflect.TypeOf((*MockChainStorer)(nil).PutMinedBlock), varargs...)
}

// Current mocks base method
func (m *MockChainStorer) Current(opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Current", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current
func (mr *MockChainStorerMockRecorder) Current(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockChainStorer)(nil).Current), opts...)
}

// Delete mocks base method
func (m *MockChainStorer) Delete(key []byte, opts ...types.CallOp) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChainStorerMockRecorder) Delete(key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChainStorer)(nil).Delete), varargs...)
}

// NewTx mocks base method
func (m *MockChainStorer) NewTx() (elldb.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTx")
	ret0, _ := ret[0].(elldb.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx
func (mr *MockChainStorerMockRecorder) NewTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockChainStorer)(nil).NewTx))
}

// DB mocks base method
func (m *MockChainStorer) DB() elldb.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(elldb.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockChainStorerMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockChainStorer)(nil).DB))
}

// MockBlockchain is a mock of Blockchain interface
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// Up mocks base method
func (m *MockBlockchain) Up() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up")
	ret0, _ := ret[0].(error)
	return ret0
}

// Up indicates an expected call of Up
func (mr *MockBlockchainMockRecorder) Up() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockBlockchain)(nil).Up))
}

// SetCoinbase mocks base method
func (m *MockBlockchain) SetCoinbase(coinbase *crypto.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCoinbase", coinbase)
}

// SetCoinbase indicates an expected call of SetCoinbase
func (mr *MockBlockchainMockRecorder) SetCoinbase(coinbase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoinbase", reflect.TypeOf((*MockBlockchain)(nil).SetCoinbase), coinbase)
}

// GetBestChain mocks base method
func (m *MockBlockchain) GetBestChain() types.Chainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestChain")
	ret0, _ := ret[0].(types.Chainer)
	return ret0
}

// GetBestChain indicates an expected call of GetBestChain
func (mr *MockBlockchainMockRecorder) GetBestChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestChain", reflect.TypeOf((*MockBlockchain)(nil).GetBestChain))
}

// OrphanBlocks mocks base method
func (m *MockBlockchain) OrphanBlocks() types.CacheReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrphanBlocks")
	ret0, _ := ret[0].(types.CacheReader)
	return ret0
}

// OrphanBlocks indicates an expected call of OrphanBlocks
func (mr *MockBlockchainMockRecorder) OrphanBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrphanBlocks", reflect.TypeOf((*MockBlockchain)(nil).OrphanBlocks))
}

// GetEventEmitter mocks base method
func (m *MockBlockchain) GetEventEmitter() *emitter.Emitter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventEmitter")
	ret0, _ := ret[0].(*emitter.Emitter)
	return ret0
}

// GetEventEmitter indicates an expected call of GetEventEmitter
func (mr *MockBlockchainMockRecorder) GetEventEmitter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventEmitter", reflect.TypeOf((*MockBlockchain)(nil).GetEventEmitter))
}

// HaveBlock mocks base method
func (m *MockBlockchain) HaveBlock(hash util.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaveBlock", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HaveBlock indicates an expected call of HaveBlock
func (mr *MockBlockchainMockRecorder) HaveBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveBlock", reflect.TypeOf((*MockBlockchain)(nil).HaveBlock), hash)
}

// GetTransaction mocks base method
func (m *MockBlockchain) GetTransaction(arg0 util.Hash, arg1 ...types.CallOp) (types.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockBlockchainMockRecorder) GetTransaction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBlockchain)(nil).GetTransaction), varargs...)
}

// ProcessBlock mocks base method
func (m *MockBlockchain) ProcessBlock(arg0 types.Block, arg1 ...types.CallOp) (types.ChainReaderFactory, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessBlock", varargs...)
	ret0, _ := ret[0].(types.ChainReaderFactory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessBlock indicates an expected call of ProcessBlock
func (mr *MockBlockchainMockRecorder) ProcessBlock(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlock", reflect.TypeOf((*MockBlockchain)(nil).ProcessBlock), varargs...)
}

// ChooseBestChain mocks base method
func (m *MockBlockchain) ChooseBestChain(opts ...types.CallOp) (types.Chainer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChooseBestChain", varargs...)
	ret0, _ := ret[0].(types.Chainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseBestChain indicates an expected call of ChooseBestChain
func (mr *MockBlockchainMockRecorder) ChooseBestChain(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseBestChain", reflect.TypeOf((*MockBlockchain)(nil).ChooseBestChain), opts...)
}

// Generate mocks base method
func (m *MockBlockchain) Generate(arg0 *types.GenerateBlockParams, arg1 ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockBlockchainMockRecorder) Generate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockBlockchain)(nil).Generate), varargs...)
}

// GetTxPool mocks base method
func (m *MockBlockchain) GetTxPool() types.TxPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxPool")
	ret0, _ := ret[0].(types.TxPool)
	return ret0
}

// GetTxPool indicates an expected call of GetTxPool
func (mr *MockBlockchainMockRecorder) GetTxPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxPool", reflect.TypeOf((*MockBlockchain)(nil).GetTxPool))
}

// ChainReader mocks base method
func (m *MockBlockchain) ChainReader() types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainReader")
	ret0, _ := ret[0].(types.ChainReaderFactory)
	return ret0
}

// ChainReader indicates an expected call of ChainReader
func (mr *MockBlockchainMockRecorder) ChainReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainReader", reflect.TypeOf((*MockBlockchain)(nil).ChainReader))
}

// GetChainsReader mocks base method
func (m *MockBlockchain) GetChainsReader() []types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainsReader")
	ret0, _ := ret[0].([]types.ChainReaderFactory)
	return ret0
}

// GetChainsReader indicates an expected call of GetChainsReader
func (mr *MockBlockchainMockRecorder) GetChainsReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainsReader", reflect.TypeOf((*MockBlockchain)(nil).GetChainsReader))
}

// SetDB mocks base method
func (m *MockBlockchain) SetDB(arg0 elldb.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDB", arg0)
}

// SetDB indicates an expected call of SetDB
func (mr *MockBlockchainMockRecorder) SetDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDB", reflect.TypeOf((*MockBlockchain)(nil).SetDB), arg0)
}

// GetBlock mocks base method
func (m *MockBlockchain) GetBlock(number uint64, hash util.Hash) (types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", number, hash)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockBlockchainMockRecorder) GetBlock(number, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockchain)(nil).GetBlock), number, hash)
}

// GetBlockByHash mocks base method
func (m *MockBlockchain) GetBlockByHash(hash util.Hash, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHash", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockchainMockRecorder) GetBlockByHash(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHash), varargs...)
}

// GetChainReaderByHash mocks base method
func (m *MockBlockchain) GetChainReaderByHash(hash util.Hash) types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainReaderByHash", hash)
	ret0, _ := ret[0].(types.ChainReaderFactory)
	return ret0
}

// GetChainReaderByHash indicates an expected call of GetChainReaderByHash
func (mr *MockBlockchainMockRecorder) GetChainReaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainReaderByHash", reflect.TypeOf((*MockBlockchain)(nil).GetChainReaderByHash), hash)
}

// SetGenesisBlock mocks base method
func (m *MockBlockchain) SetGenesisBlock(block types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGenesisBlock", block)
}

// SetGenesisBlock indicates an expected call of SetGenesisBlock
func (mr *MockBlockchainMockRecorder) SetGenesisBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenesisBlock", reflect.TypeOf((*MockBlockchain)(nil).SetGenesisBlock), block)
}

// CreateAccount mocks base method
func (m *MockBlockchain) CreateAccount(blockNo uint64, chain types.Chainer, account types.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", blockNo, chain, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockBlockchainMockRecorder) CreateAccount(blockNo, chain, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBlockchain)(nil).CreateAccount), blockNo, chain, account)
}

// GetAccount mocks base method
func (m *MockBlockchain) GetAccount(address util.String, opts ...types.CallOp) (types.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockBlockchainMockRecorder) GetAccount(address interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBlockchain)(nil).GetAccount), varargs...)
}

// GetAccountNonce mocks base method
func (m *MockBlockchain) GetAccountNonce(address util.String, opts ...types.CallOp) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountNonce", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountNonce indicates an expected call of GetAccountNonce
func (mr *MockBlockchainMockRecorder) GetAccountNonce(address interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountNonce", reflect.TypeOf((*MockBlockchain)(nil).GetAccountNonce), varargs...)
}

// GetLocators mocks base method
func (m *MockBlockchain) GetLocators() ([]util.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocators")
	ret0, _ := ret[0].([]util.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocators indicates an expected call of GetLocators
func (mr *MockBlockchainMockRecorder) GetLocators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocators", reflect.TypeOf((*MockBlockchain)(nil).GetLocators))
}

// MockBlockMaker is a mock of BlockMaker interface
type MockBlockMaker struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMakerMockRecorder
}

// MockBlockMakerMockRecorder is the mock recorder for MockBlockMaker
type MockBlockMakerMockRecorder struct {
	mock *MockBlockMaker
}

// NewMockBlockMaker creates a new mock instance
func NewMockBlockMaker(ctrl *gomock.Controller) *MockBlockMaker {
	mock := &MockBlockMaker{ctrl: ctrl}
	mock.recorder = &MockBlockMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockMaker) EXPECT() *MockBlockMakerMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockBlockMaker) Generate(arg0 *types.GenerateBlockParams, arg1 ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockBlockMakerMockRecorder) Generate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockBlockMaker)(nil).Generate), varargs...)
}

// ChainReader mocks base method
func (m *MockBlockMaker) ChainReader() types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainReader")
	ret0, _ := ret[0].(types.ChainReaderFactory)
	return ret0
}

// ChainReader indicates an expected call of ChainReader
func (mr *MockBlockMakerMockRecorder) ChainReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainReader", reflect.TypeOf((*MockBlockMaker)(nil).ChainReader))
}

// ProcessBlock mocks base method
func (m *MockBlockMaker) ProcessBlock(arg0 types.Block, arg1 ...types.CallOp) (types.ChainReaderFactory, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessBlock", varargs...)
	ret0, _ := ret[0].(types.ChainReaderFactory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessBlock indicates an expected call of ProcessBlock
func (mr *MockBlockMakerMockRecorder) ProcessBlock(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBlock", reflect.TypeOf((*MockBlockMaker)(nil).ProcessBlock), varargs...)
}

// IsMainChain mocks base method
func (m *MockBlockMaker) IsMainChain(arg0 types.ChainReaderFactory) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMainChain", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMainChain indicates an expected call of IsMainChain
func (mr *MockBlockMakerMockRecorder) IsMainChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMainChain", reflect.TypeOf((*MockBlockMaker)(nil).IsMainChain), arg0)
}

// MockChainReaderFactory is a mock of ChainReaderFactory interface
type MockChainReaderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockChainReaderFactoryMockRecorder
}

// MockChainReaderFactoryMockRecorder is the mock recorder for MockChainReaderFactory
type MockChainReaderFactoryMockRecorder struct {
	mock *MockChainReaderFactory
}

// NewMockChainReaderFactory creates a new mock instance
func NewMockChainReaderFactory(ctrl *gomock.Controller) *MockChainReaderFactory {
	mock := &MockChainReaderFactory{ctrl: ctrl}
	mock.recorder = &MockChainReaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainReaderFactory) EXPECT() *MockChainReaderFactoryMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockChainReaderFactory) GetID() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockChainReaderFactoryMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockChainReaderFactory)(nil).GetID))
}

// GetBlock mocks base method
func (m *MockChainReaderFactory) GetBlock(number uint64, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{number}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainReaderFactoryMockRecorder) GetBlock(number interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{number}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainReaderFactory)(nil).GetBlock), varargs...)
}

// GetBlockByHash mocks base method
func (m *MockChainReaderFactory) GetBlockByHash(hash util.Hash, opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHash", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockChainReaderFactoryMockRecorder) GetBlockByHash(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockChainReaderFactory)(nil).GetBlockByHash), varargs...)
}

// GetHeader mocks base method
func (m *MockChainReaderFactory) GetHeader(number uint64, opts ...types.CallOp) (types.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{number}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeader", varargs...)
	ret0, _ := ret[0].(types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockChainReaderFactoryMockRecorder) GetHeader(number interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{number}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChainReaderFactory)(nil).GetHeader), varargs...)
}

// GetHeaderByHash mocks base method
func (m *MockChainReaderFactory) GetHeaderByHash(hash util.Hash, opts ...types.CallOp) (types.Header, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{hash}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeaderByHash", varargs...)
	ret0, _ := ret[0].(types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockChainReaderFactoryMockRecorder) GetHeaderByHash(hash interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hash}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChainReaderFactory)(nil).GetHeaderByHash), varargs...)
}

// Current mocks base method
func (m *MockChainReaderFactory) Current(opts ...types.CallOp) (types.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Current", varargs...)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current
func (mr *MockChainReaderFactoryMockRecorder) Current(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockChainReaderFactory)(nil).Current), opts...)
}

// GetAccount mocks base method
func (m *MockChainReaderFactory) GetAccount(address util.String, opts ...types.CallOp) (types.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockChainReaderFactoryMockRecorder) GetAccount(address interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockChainReaderFactory)(nil).GetAccount), varargs...)
}

// GetParent mocks base method
func (m *MockChainReaderFactory) GetParent() types.ChainReaderFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(types.ChainReaderFactory)
	return ret0
}

// GetParent indicates an expected call of GetParent
func (mr *MockChainReaderFactoryMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockChainReaderFactory)(nil).GetParent))
}

// GetParentBlock mocks base method
func (m *MockChainReaderFactory) GetParentBlock() types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentBlock")
	ret0, _ := ret[0].(types.Block)
	return ret0
}

// GetParentBlock indicates an expected call of GetParentBlock
func (mr *MockChainReaderFactoryMockRecorder) GetParentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentBlock", reflect.TypeOf((*MockChainReaderFactory)(nil).GetParentBlock))
}

// GetRoot mocks base method
func (m *MockChainReaderFactory) GetRoot() types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(types.Block)
	return ret0
}

// GetRoot indicates an expected call of GetRoot
func (mr *MockChainReaderFactoryMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockChainReaderFactory)(nil).GetRoot))
}

// MockCacheReader is a mock of CacheReader interface
type MockCacheReader struct {
	ctrl     *gomock.Controller
	recorder *MockCacheReaderMockRecorder
}

// MockCacheReaderMockRecorder is the mock recorder for MockCacheReader
type MockCacheReaderMockRecorder struct {
	mock *MockCacheReader
}

// NewMockCacheReader creates a new mock instance
func NewMockCacheReader(ctrl *gomock.Controller) *MockCacheReader {
	mock := &MockCacheReader{ctrl: ctrl}
	mock.recorder = &MockCacheReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheReader) EXPECT() *MockCacheReaderMockRecorder {
	return m.recorder
}

// Len mocks base method
func (m *MockCacheReader) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockCacheReaderMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCacheReader)(nil).Len))
}

// Has mocks base method
func (m *MockCacheReader) Has(key interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockCacheReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCacheReader)(nil).Has), key)
}

// Get mocks base method
func (m *MockCacheReader) Get(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockCacheReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheReader)(nil).Get), key)
}

// MockBlock is a mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// ComputeHash mocks base method
func (m *MockBlock) ComputeHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// ComputeHash indicates an expected call of ComputeHash
func (mr *MockBlockMockRecorder) ComputeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeHash", reflect.TypeOf((*MockBlock)(nil).ComputeHash))
}

// GetBytes mocks base method
func (m *MockBlock) GetBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytes indicates an expected call of GetBytes
func (mr *MockBlockMockRecorder) GetBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockBlock)(nil).GetBytes))
}

// GetHeader mocks base method
func (m *MockBlock) GetHeader() types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(types.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockBlockMockRecorder) GetHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockBlock)(nil).GetHeader))
}

// SetHeader mocks base method
func (m *MockBlock) SetHeader(h types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", h)
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBlockMockRecorder) SetHeader(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlock)(nil).SetHeader), h)
}

// ReplaceHeader mocks base method
func (m *MockBlock) ReplaceHeader(header types.Header) types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceHeader", header)
	ret0, _ := ret[0].(types.Block)
	return ret0
}

// ReplaceHeader indicates an expected call of ReplaceHeader
func (mr *MockBlockMockRecorder) ReplaceHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceHeader", reflect.TypeOf((*MockBlock)(nil).ReplaceHeader), header)
}

// GetNumber mocks base method
func (m *MockBlock) GetNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNumber indicates an expected call of GetNumber
func (mr *MockBlockMockRecorder) GetNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockBlock)(nil).GetNumber))
}

// GetHash mocks base method
func (m *MockBlock) GetHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash
func (mr *MockBlockMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockBlock)(nil).GetHash))
}

// SetHash mocks base method
func (m *MockBlock) SetHash(arg0 util.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", arg0)
}

// SetHash indicates an expected call of SetHash
func (mr *MockBlockMockRecorder) SetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockBlock)(nil).SetHash), arg0)
}

// GetTransactions mocks base method
func (m *MockBlock) GetTransactions() []types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions")
	ret0, _ := ret[0].([]types.Transaction)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockBlockMockRecorder) GetTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockBlock)(nil).GetTransactions))
}

// GetSignature mocks base method
func (m *MockBlock) GetSignature() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSignature indicates an expected call of GetSignature
func (mr *MockBlockMockRecorder) GetSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockBlock)(nil).GetSignature))
}

// SetSignature mocks base method
func (m *MockBlock) SetSignature(sig []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSignature", sig)
}

// SetSignature indicates an expected call of SetSignature
func (mr *MockBlockMockRecorder) SetSignature(sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignature", reflect.TypeOf((*MockBlock)(nil).SetSignature), sig)
}

// GetHashAsHex mocks base method
func (m *MockBlock) GetHashAsHex() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashAsHex")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHashAsHex indicates an expected call of GetHashAsHex
func (mr *MockBlockMockRecorder) GetHashAsHex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashAsHex", reflect.TypeOf((*MockBlock)(nil).GetHashAsHex))
}

// GetBytesNoHashSig mocks base method
func (m *MockBlock) GetBytesNoHashSig() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesNoHashSig")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytesNoHashSig indicates an expected call of GetBytesNoHashSig
func (mr *MockBlockMockRecorder) GetBytesNoHashSig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesNoHashSig", reflect.TypeOf((*MockBlock)(nil).GetBytesNoHashSig))
}

// GetSize mocks base method
func (m *MockBlock) GetSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSize indicates an expected call of GetSize
func (mr *MockBlockMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockBlock)(nil).GetSize))
}

// GetSizeNoTxs mocks base method
func (m *MockBlock) GetSizeNoTxs() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeNoTxs")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSizeNoTxs indicates an expected call of GetSizeNoTxs
func (mr *MockBlockMockRecorder) GetSizeNoTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeNoTxs", reflect.TypeOf((*MockBlock)(nil).GetSizeNoTxs))
}

// GetBytesNoTxs mocks base method
func (m *MockBlock) GetBytesNoTxs() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesNoTxs")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytesNoTxs indicates an expected call of GetBytesNoTxs
func (mr *MockBlockMockRecorder) GetBytesNoTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesNoTxs", reflect.TypeOf((*MockBlock)(nil).GetBytesNoTxs))
}

// GetValidationContexts mocks base method
func (m *MockBlock) GetValidationContexts() []types.ValidationContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidationContexts")
	ret0, _ := ret[0].([]types.ValidationContext)
	return ret0
}

// GetValidationContexts indicates an expected call of GetValidationContexts
func (mr *MockBlockMockRecorder) GetValidationContexts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationContexts", reflect.TypeOf((*MockBlock)(nil).GetValidationContexts))
}

// SetValidationContexts mocks base method
func (m *MockBlock) SetValidationContexts(arg0 ...types.ValidationContext) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetValidationContexts", varargs...)
}

// SetValidationContexts indicates an expected call of SetValidationContexts
func (mr *MockBlockMockRecorder) SetValidationContexts(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidationContexts", reflect.TypeOf((*MockBlock)(nil).SetValidationContexts), arg0...)
}

// SetSig mocks base method
func (m *MockBlock) SetSig(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSig", arg0)
}

// SetSig indicates an expected call of SetSig
func (mr *MockBlockMockRecorder) SetSig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSig", reflect.TypeOf((*MockBlock)(nil).SetSig), arg0)
}

// MockHeader is a mock of Header interface
type MockHeader struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderMockRecorder
}

// MockHeaderMockRecorder is the mock recorder for MockHeader
type MockHeaderMockRecorder struct {
	mock *MockHeader
}

// NewMockHeader creates a new mock instance
func NewMockHeader(ctrl *gomock.Controller) *MockHeader {
	mock := &MockHeader{ctrl: ctrl}
	mock.recorder = &MockHeaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHeader) EXPECT() *MockHeaderMockRecorder {
	return m.recorder
}

// GetNumber mocks base method
func (m *MockHeader) GetNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNumber indicates an expected call of GetNumber
func (mr *MockHeaderMockRecorder) GetNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockHeader)(nil).GetNumber))
}

// SetNumber mocks base method
func (m *MockHeader) SetNumber(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNumber", arg0)
}

// SetNumber indicates an expected call of SetNumber
func (mr *MockHeaderMockRecorder) SetNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumber", reflect.TypeOf((*MockHeader)(nil).SetNumber), arg0)
}

// GetHashNoNonce mocks base method
func (m *MockHeader) GetHashNoNonce() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashNoNonce")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetHashNoNonce indicates an expected call of GetHashNoNonce
func (mr *MockHeaderMockRecorder) GetHashNoNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashNoNonce", reflect.TypeOf((*MockHeader)(nil).GetHashNoNonce))
}

// GetBytes mocks base method
func (m *MockHeader) GetBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytes indicates an expected call of GetBytes
func (mr *MockHeaderMockRecorder) GetBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockHeader)(nil).GetBytes))
}

// ComputeHash mocks base method
func (m *MockHeader) ComputeHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// ComputeHash indicates an expected call of ComputeHash
func (mr *MockHeaderMockRecorder) ComputeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeHash", reflect.TypeOf((*MockHeader)(nil).ComputeHash))
}

// GetExtra mocks base method
func (m *MockHeader) GetExtra() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtra")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetExtra indicates an expected call of GetExtra
func (mr *MockHeaderMockRecorder) GetExtra() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtra", reflect.TypeOf((*MockHeader)(nil).GetExtra))
}

// GetTimestamp mocks base method
func (m *MockHeader) GetTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp
func (mr *MockHeaderMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockHeader)(nil).GetTimestamp))
}

// SetTimestamp mocks base method
func (m *MockHeader) SetTimestamp(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", arg0)
}

// SetTimestamp indicates an expected call of SetTimestamp
func (mr *MockHeaderMockRecorder) SetTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockHeader)(nil).SetTimestamp), arg0)
}

// GetDifficulty mocks base method
func (m *MockHeader) GetDifficulty() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDifficulty")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetDifficulty indicates an expected call of GetDifficulty
func (mr *MockHeaderMockRecorder) GetDifficulty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifficulty", reflect.TypeOf((*MockHeader)(nil).GetDifficulty))
}

// SetDifficulty mocks base method
func (m *MockHeader) SetDifficulty(arg0 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDifficulty", arg0)
}

// SetDifficulty indicates an expected call of SetDifficulty
func (mr *MockHeaderMockRecorder) SetDifficulty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDifficulty", reflect.TypeOf((*MockHeader)(nil).SetDifficulty), arg0)
}

// GetNonce mocks base method
func (m *MockHeader) GetNonce() util.BlockNonce {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce")
	ret0, _ := ret[0].(util.BlockNonce)
	return ret0
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockHeaderMockRecorder) GetNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockHeader)(nil).GetNonce))
}

// SetNonce mocks base method
func (m *MockHeader) SetNonce(nonce util.BlockNonce) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", nonce)
}

// SetNonce indicates an expected call of SetNonce
func (mr *MockHeaderMockRecorder) SetNonce(nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockHeader)(nil).SetNonce), nonce)
}

// GetParentHash mocks base method
func (m *MockHeader) GetParentHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetParentHash indicates an expected call of GetParentHash
func (mr *MockHeaderMockRecorder) GetParentHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentHash", reflect.TypeOf((*MockHeader)(nil).GetParentHash))
}

// SetParentHash mocks base method
func (m *MockHeader) SetParentHash(arg0 util.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParentHash", arg0)
}

// SetParentHash indicates an expected call of SetParentHash
func (mr *MockHeaderMockRecorder) SetParentHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParentHash", reflect.TypeOf((*MockHeader)(nil).SetParentHash), arg0)
}

// SetCreatorPubKey mocks base method
func (m *MockHeader) SetCreatorPubKey(arg0 util.String) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreatorPubKey", arg0)
}

// SetCreatorPubKey indicates an expected call of SetCreatorPubKey
func (mr *MockHeaderMockRecorder) SetCreatorPubKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatorPubKey", reflect.TypeOf((*MockHeader)(nil).SetCreatorPubKey), arg0)
}

// GetCreatorPubKey mocks base method
func (m *MockHeader) GetCreatorPubKey() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorPubKey")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetCreatorPubKey indicates an expected call of GetCreatorPubKey
func (mr *MockHeaderMockRecorder) GetCreatorPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorPubKey", reflect.TypeOf((*MockHeader)(nil).GetCreatorPubKey))
}

// Copy mocks base method
func (m *MockHeader) Copy() types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(types.Header)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockHeaderMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockHeader)(nil).Copy))
}

// SetStateRoot mocks base method
func (m *MockHeader) SetStateRoot(arg0 util.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateRoot", arg0)
}

// SetStateRoot indicates an expected call of SetStateRoot
func (mr *MockHeaderMockRecorder) SetStateRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateRoot", reflect.TypeOf((*MockHeader)(nil).SetStateRoot), arg0)
}

// GetStateRoot mocks base method
func (m *MockHeader) GetStateRoot() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetStateRoot indicates an expected call of GetStateRoot
func (mr *MockHeaderMockRecorder) GetStateRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MockHeader)(nil).GetStateRoot))
}

// SetTransactionsRoot mocks base method
func (m *MockHeader) SetTransactionsRoot(txRoot util.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransactionsRoot", txRoot)
}

// SetTransactionsRoot indicates an expected call of SetTransactionsRoot
func (mr *MockHeaderMockRecorder) SetTransactionsRoot(txRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransactionsRoot", reflect.TypeOf((*MockHeader)(nil).SetTransactionsRoot), txRoot)
}

// GetTransactionsRoot mocks base method
func (m *MockHeader) GetTransactionsRoot() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsRoot")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetTransactionsRoot indicates an expected call of GetTransactionsRoot
func (mr *MockHeaderMockRecorder) GetTransactionsRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsRoot", reflect.TypeOf((*MockHeader)(nil).GetTransactionsRoot))
}

// GetTotalDifficulty mocks base method
func (m *MockHeader) GetTotalDifficulty() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDifficulty")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTotalDifficulty indicates an expected call of GetTotalDifficulty
func (mr *MockHeaderMockRecorder) GetTotalDifficulty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDifficulty", reflect.TypeOf((*MockHeader)(nil).GetTotalDifficulty))
}

// SetTotalDifficulty mocks base method
func (m *MockHeader) SetTotalDifficulty(arg0 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTotalDifficulty", arg0)
}

// SetTotalDifficulty indicates an expected call of SetTotalDifficulty
func (mr *MockHeaderMockRecorder) SetTotalDifficulty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalDifficulty", reflect.TypeOf((*MockHeader)(nil).SetTotalDifficulty), arg0)
}

// MockAccount is a mock of Account interface
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// GetAddress mocks base method
func (m *MockAccount) GetAddress() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockAccountMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAccount)(nil).GetAddress))
}

// GetBalance mocks base method
func (m *MockAccount) GetBalance() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockAccountMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccount)(nil).GetBalance))
}

// SetBalance mocks base method
func (m *MockAccount) SetBalance(arg0 util.String) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0)
}

// SetBalance indicates an expected call of SetBalance
func (mr *MockAccountMockRecorder) SetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockAccount)(nil).SetBalance), arg0)
}

// GetNonce mocks base method
func (m *MockAccount) GetNonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockAccountMockRecorder) GetNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockAccount)(nil).GetNonce))
}

// IncrNonce mocks base method
func (m *MockAccount) IncrNonce() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrNonce")
}

// IncrNonce indicates an expected call of IncrNonce
func (mr *MockAccountMockRecorder) IncrNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrNonce", reflect.TypeOf((*MockAccount)(nil).IncrNonce))
}

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetHash mocks base method
func (m *MockTransaction) GetHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash
func (mr *MockTransactionMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockTransaction)(nil).GetHash))
}

// SetHash mocks base method
func (m *MockTransaction) SetHash(arg0 util.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", arg0)
}

// SetHash indicates an expected call of SetHash
func (mr *MockTransactionMockRecorder) SetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockTransaction)(nil).SetHash), arg0)
}

// GetBytesNoHashAndSig mocks base method
func (m *MockTransaction) GetBytesNoHashAndSig() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesNoHashAndSig")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBytesNoHashAndSig indicates an expected call of GetBytesNoHashAndSig
func (mr *MockTransactionMockRecorder) GetBytesNoHashAndSig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesNoHashAndSig", reflect.TypeOf((*MockTransaction)(nil).GetBytesNoHashAndSig))
}

// GetSizeNoFee mocks base method
func (m *MockTransaction) GetSizeNoFee() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeNoFee")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSizeNoFee indicates an expected call of GetSizeNoFee
func (mr *MockTransactionMockRecorder) GetSizeNoFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeNoFee", reflect.TypeOf((*MockTransaction)(nil).GetSizeNoFee))
}

// ComputeHash mocks base method
func (m *MockTransaction) ComputeHash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeHash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// ComputeHash indicates an expected call of ComputeHash
func (mr *MockTransactionMockRecorder) ComputeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeHash", reflect.TypeOf((*MockTransaction)(nil).ComputeHash))
}

// GetID mocks base method
func (m *MockTransaction) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockTransactionMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTransaction)(nil).GetID))
}

// Sign mocks base method
func (m *MockTransaction) Sign(privKey string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", privKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockTransactionMockRecorder) Sign(privKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockTransaction)(nil).Sign), privKey)
}

// GetType mocks base method
func (m *MockTransaction) GetType() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockTransactionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockTransaction)(nil).GetType))
}

// GetFrom mocks base method
func (m *MockTransaction) GetFrom() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetFrom indicates an expected call of GetFrom
func (mr *MockTransactionMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockTransaction)(nil).GetFrom))
}

// SetFrom mocks base method
func (m *MockTransaction) SetFrom(arg0 util.String) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFrom", arg0)
}

// SetFrom indicates an expected call of SetFrom
func (mr *MockTransactionMockRecorder) SetFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFrom", reflect.TypeOf((*MockTransaction)(nil).SetFrom), arg0)
}

// GetTo mocks base method
func (m *MockTransaction) GetTo() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetTo indicates an expected call of GetTo
func (mr *MockTransactionMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockTransaction)(nil).GetTo))
}

// GetValue mocks base method
func (m *MockTransaction) GetValue() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockTransactionMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockTransaction)(nil).GetValue))
}

// SetValue mocks base method
func (m *MockTransaction) SetValue(arg0 util.String) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0)
}

// SetValue indicates an expected call of SetValue
func (mr *MockTransactionMockRecorder) SetValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockTransaction)(nil).SetValue), arg0)
}

// GetFee mocks base method
func (m *MockTransaction) GetFee() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetFee indicates an expected call of GetFee
func (mr *MockTransactionMockRecorder) GetFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockTransaction)(nil).GetFee))
}

// GetNonce mocks base method
func (m *MockTransaction) GetNonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockTransactionMockRecorder) GetNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockTransaction)(nil).GetNonce))
}

// GetTimestamp mocks base method
func (m *MockTransaction) GetTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp
func (mr *MockTransactionMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockTransaction)(nil).GetTimestamp))
}

// SetTimestamp mocks base method
func (m *MockTransaction) SetTimestamp(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", arg0)
}

// SetTimestamp indicates an expected call of SetTimestamp
func (mr *MockTransactionMockRecorder) SetTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockTransaction)(nil).SetTimestamp), arg0)
}

// GetSenderPubKey mocks base method
func (m *MockTransaction) GetSenderPubKey() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderPubKey")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetSenderPubKey indicates an expected call of GetSenderPubKey
func (mr *MockTransactionMockRecorder) GetSenderPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderPubKey", reflect.TypeOf((*MockTransaction)(nil).GetSenderPubKey))
}

// SetSenderPubKey mocks base method
func (m *MockTransaction) SetSenderPubKey(arg0 util.String) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSenderPubKey", arg0)
}

// SetSenderPubKey indicates an expected call of SetSenderPubKey
func (mr *MockTransactionMockRecorder) SetSenderPubKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSenderPubKey", reflect.TypeOf((*MockTransaction)(nil).SetSenderPubKey), arg0)
}

// GetSignature mocks base method
func (m *MockTransaction) GetSignature() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSignature indicates an expected call of GetSignature
func (mr *MockTransactionMockRecorder) GetSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockTransaction)(nil).GetSignature))
}

// SetSignature mocks base method
func (m *MockTransaction) SetSignature(sig []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSignature", sig)
}

// SetSignature indicates an expected call of SetSignature
func (mr *MockTransactionMockRecorder) SetSignature(sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignature", reflect.TypeOf((*MockTransaction)(nil).SetSignature), sig)
}

// MockCallOp is a mock of CallOp interface
type MockCallOp struct {
	ctrl     *gomock.Controller
	recorder *MockCallOpMockRecorder
}

// MockCallOpMockRecorder is the mock recorder for MockCallOp
type MockCallOpMockRecorder struct {
	mock *MockCallOp
}

// NewMockCallOp creates a new mock instance
func NewMockCallOp(ctrl *gomock.Controller) *MockCallOp {
	mock := &MockCallOp{ctrl: ctrl}
	mock.recorder = &MockCallOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallOp) EXPECT() *MockCallOpMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockCallOp) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockCallOpMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCallOp)(nil).GetName))
}

// MockTree is a mock of Tree interface
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockTree) Add(item merkletree.Content) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", item)
}

// Add indicates an expected call of Add
func (mr *MockTreeMockRecorder) Add(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTree)(nil).Add), item)
}

// GetItems mocks base method
func (m *MockTree) GetItems() []merkletree.Content {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]merkletree.Content)
	return ret0
}

// GetItems indicates an expected call of GetItems
func (mr *MockTreeMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockTree)(nil).GetItems))
}

// Build mocks base method
func (m *MockTree) Build() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockTreeMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockTree)(nil).Build))
}

// Root mocks base method
func (m *MockTree) Root() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// Root indicates an expected call of Root
func (mr *MockTreeMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockTree)(nil).Root))
}

// MockTxContainer is a mock of TxContainer interface
type MockTxContainer struct {
	ctrl     *gomock.Controller
	recorder *MockTxContainerMockRecorder
}

// MockTxContainerMockRecorder is the mock recorder for MockTxContainer
type MockTxContainerMockRecorder struct {
	mock *MockTxContainer
}

// NewMockTxContainer creates a new mock instance
func NewMockTxContainer(ctrl *gomock.Controller) *MockTxContainer {
	mock := &MockTxContainer{ctrl: ctrl}
	mock.recorder = &MockTxContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxContainer) EXPECT() *MockTxContainerMockRecorder {
	return m.recorder
}

// ByteSize mocks base method
func (m *MockTxContainer) ByteSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByteSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ByteSize indicates an expected call of ByteSize
func (mr *MockTxContainerMockRecorder) ByteSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByteSize", reflect.TypeOf((*MockTxContainer)(nil).ByteSize))
}

// Add mocks base method
func (m *MockTxContainer) Add(tx types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockTxContainerMockRecorder) Add(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTxContainer)(nil).Add), tx)
}

// Has mocks base method
func (m *MockTxContainer) Has(tx types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", tx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockTxContainerMockRecorder) Has(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTxContainer)(nil).Has), tx)
}

// Size mocks base method
func (m *MockTxContainer) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockTxContainerMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTxContainer)(nil).Size))
}

// First mocks base method
func (m *MockTxContainer) First() types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(types.Transaction)
	return ret0
}

// First indicates an expected call of First
func (mr *MockTxContainerMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockTxContainer)(nil).First))
}

// Last mocks base method
func (m *MockTxContainer) Last() types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(types.Transaction)
	return ret0
}

// Last indicates an expected call of Last
func (mr *MockTxContainerMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockTxContainer)(nil).Last))
}

// Sort mocks base method
func (m *MockTxContainer) Sort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sort")
}

// Sort indicates an expected call of Sort
func (mr *MockTxContainerMockRecorder) Sort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockTxContainer)(nil).Sort))
}

// IFind mocks base method
func (m *MockTxContainer) IFind(predicate func(types.Transaction) bool) types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFind", predicate)
	ret0, _ := ret[0].(types.Transaction)
	return ret0
}

// IFind indicates an expected call of IFind
func (mr *MockTxContainerMockRecorder) IFind(predicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFind", reflect.TypeOf((*MockTxContainer)(nil).IFind), predicate)
}

// Remove mocks base method
func (m *MockTxContainer) Remove(txs ...types.Transaction) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Remove", varargs...)
}

// Remove indicates an expected call of Remove
func (mr *MockTxContainerMockRecorder) Remove(txs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTxContainer)(nil).Remove), txs...)
}

// MockTxPool is a mock of TxPool interface
type MockTxPool struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolMockRecorder
}

// MockTxPoolMockRecorder is the mock recorder for MockTxPool
type MockTxPoolMockRecorder struct {
	mock *MockTxPool
}

// NewMockTxPool creates a new mock instance
func NewMockTxPool(ctrl *gomock.Controller) *MockTxPool {
	mock := &MockTxPool{ctrl: ctrl}
	mock.recorder = &MockTxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxPool) EXPECT() *MockTxPoolMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockTxPool) Put(tx types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockTxPoolMockRecorder) Put(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTxPool)(nil).Put), tx)
}

// Has mocks base method
func (m *MockTxPool) Has(tx types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", tx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockTxPoolMockRecorder) Has(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTxPool)(nil).Has), tx)
}

// HasByHash mocks base method
func (m *MockTxPool) HasByHash(hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasByHash", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasByHash indicates an expected call of HasByHash
func (mr *MockTxPoolMockRecorder) HasByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasByHash", reflect.TypeOf((*MockTxPool)(nil).HasByHash), hash)
}

// Remove mocks base method
func (m *MockTxPool) Remove(txs ...types.Transaction) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Remove", varargs...)
}

// Remove indicates an expected call of Remove
func (mr *MockTxPoolMockRecorder) Remove(txs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTxPool)(nil).Remove), txs...)
}

// ByteSize mocks base method
func (m *MockTxPool) ByteSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByteSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ByteSize indicates an expected call of ByteSize
func (mr *MockTxPoolMockRecorder) ByteSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByteSize", reflect.TypeOf((*MockTxPool)(nil).ByteSize))
}

// Size mocks base method
func (m *MockTxPool) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockTxPoolMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTxPool)(nil).Size))
}

// Container mocks base method
func (m *MockTxPool) Container() types.TxContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(types.TxContainer)
	return ret0
}

// Container indicates an expected call of Container
func (mr *MockTxPoolMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockTxPool)(nil).Container))
}

// GetByHash mocks base method
func (m *MockTxPool) GetByHash(hash string) types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", hash)
	ret0, _ := ret[0].(types.Transaction)
	return ret0
}

// GetByHash indicates an expected call of GetByHash
func (mr *MockTxPoolMockRecorder) GetByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockTxPool)(nil).GetByHash), hash)
}

// GetByFrom mocks base method
func (m *MockTxPool) GetByFrom(address util.String) []types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFrom", address)
	ret0, _ := ret[0].([]types.Transaction)
	return ret0
}

// GetByFrom indicates an expected call of GetByFrom
func (mr *MockTxPoolMockRecorder) GetByFrom(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFrom", reflect.TypeOf((*MockTxPool)(nil).GetByFrom), address)
}

// MockChainInfo is a mock of ChainInfo interface
type MockChainInfo struct {
	ctrl     *gomock.Controller
	recorder *MockChainInfoMockRecorder
}

// MockChainInfoMockRecorder is the mock recorder for MockChainInfo
type MockChainInfoMockRecorder struct {
	mock *MockChainInfo
}

// NewMockChainInfo creates a new mock instance
func NewMockChainInfo(ctrl *gomock.Controller) *MockChainInfo {
	mock := &MockChainInfo{ctrl: ctrl}
	mock.recorder = &MockChainInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainInfo) EXPECT() *MockChainInfoMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockChainInfo) GetID() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockChainInfoMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockChainInfo)(nil).GetID))
}

// GetParentChainID mocks base method
func (m *MockChainInfo) GetParentChainID() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentChainID")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetParentChainID indicates an expected call of GetParentChainID
func (mr *MockChainInfoMockRecorder) GetParentChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentChainID", reflect.TypeOf((*MockChainInfo)(nil).GetParentChainID))
}

// GetParentBlockNumber mocks base method
func (m *MockChainInfo) GetParentBlockNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentBlockNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetParentBlockNumber indicates an expected call of GetParentBlockNumber
func (mr *MockChainInfoMockRecorder) GetParentBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentBlockNumber", reflect.TypeOf((*MockChainInfo)(nil).GetParentBlockNumber))
}

// GetTimestamp mocks base method
func (m *MockChainInfo) GetTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp
func (mr *MockChainInfoMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockChainInfo)(nil).GetTimestamp))
}
