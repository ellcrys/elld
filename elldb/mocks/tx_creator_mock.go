package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/ellcrys/elld/elldb.TxCreator -o ./mocks/tx_creator_mock.go

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_elldb "github.com/ellcrys/elld/elldb"
	"github.com/gojuno/minimock"
)

// TxCreatorMock implements elldb.TxCreator
type TxCreatorMock struct {
	t minimock.Tester

	funcNewTx          func() (t1 mm_elldb.Tx, err error)
	inspectFuncNewTx   func()
	afterNewTxCounter  uint64
	beforeNewTxCounter uint64
	NewTxMock          mTxCreatorMockNewTx
}

// NewTxCreatorMock returns a mock for elldb.TxCreator
func NewTxCreatorMock(t minimock.Tester) *TxCreatorMock {
	m := &TxCreatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewTxMock = mTxCreatorMockNewTx{mock: m}

	return m
}

type mTxCreatorMockNewTx struct {
	mock               *TxCreatorMock
	defaultExpectation *TxCreatorMockNewTxExpectation
	expectations       []*TxCreatorMockNewTxExpectation
}

// TxCreatorMockNewTxExpectation specifies expectation struct of the TxCreator.NewTx
type TxCreatorMockNewTxExpectation struct {
	mock *TxCreatorMock

	results *TxCreatorMockNewTxResults
	Counter uint64
}

// TxCreatorMockNewTxResults contains results of the TxCreator.NewTx
type TxCreatorMockNewTxResults struct {
	t1  mm_elldb.Tx
	err error
}

// Expect sets up expected params for TxCreator.NewTx
func (mmNewTx *mTxCreatorMockNewTx) Expect() *mTxCreatorMockNewTx {
	if mmNewTx.mock.funcNewTx != nil {
		mmNewTx.mock.t.Fatalf("TxCreatorMock.NewTx mock is already set by Set")
	}

	if mmNewTx.defaultExpectation == nil {
		mmNewTx.defaultExpectation = &TxCreatorMockNewTxExpectation{}
	}

	return mmNewTx
}

// Inspect accepts an inspector function that has same arguments as the TxCreator.NewTx
func (mmNewTx *mTxCreatorMockNewTx) Inspect(f func()) *mTxCreatorMockNewTx {
	if mmNewTx.mock.inspectFuncNewTx != nil {
		mmNewTx.mock.t.Fatalf("Inspect function is already set for TxCreatorMock.NewTx")
	}

	mmNewTx.mock.inspectFuncNewTx = f

	return mmNewTx
}

// Return sets up results that will be returned by TxCreator.NewTx
func (mmNewTx *mTxCreatorMockNewTx) Return(t1 mm_elldb.Tx, err error) *TxCreatorMock {
	if mmNewTx.mock.funcNewTx != nil {
		mmNewTx.mock.t.Fatalf("TxCreatorMock.NewTx mock is already set by Set")
	}

	if mmNewTx.defaultExpectation == nil {
		mmNewTx.defaultExpectation = &TxCreatorMockNewTxExpectation{mock: mmNewTx.mock}
	}
	mmNewTx.defaultExpectation.results = &TxCreatorMockNewTxResults{t1, err}
	return mmNewTx.mock
}

//Set uses given function f to mock the TxCreator.NewTx method
func (mmNewTx *mTxCreatorMockNewTx) Set(f func() (t1 mm_elldb.Tx, err error)) *TxCreatorMock {
	if mmNewTx.defaultExpectation != nil {
		mmNewTx.mock.t.Fatalf("Default expectation is already set for the TxCreator.NewTx method")
	}

	if len(mmNewTx.expectations) > 0 {
		mmNewTx.mock.t.Fatalf("Some expectations are already set for the TxCreator.NewTx method")
	}

	mmNewTx.mock.funcNewTx = f
	return mmNewTx.mock
}

// NewTx implements elldb.TxCreator
func (mmNewTx *TxCreatorMock) NewTx() (t1 mm_elldb.Tx, err error) {
	mm_atomic.AddUint64(&mmNewTx.beforeNewTxCounter, 1)
	defer mm_atomic.AddUint64(&mmNewTx.afterNewTxCounter, 1)

	if mmNewTx.inspectFuncNewTx != nil {
		mmNewTx.inspectFuncNewTx()
	}

	if mmNewTx.NewTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewTx.NewTxMock.defaultExpectation.Counter, 1)

		mm_results := mmNewTx.NewTxMock.defaultExpectation.results
		if mm_results == nil {
			mmNewTx.t.Fatal("No results are set for the TxCreatorMock.NewTx")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmNewTx.funcNewTx != nil {
		return mmNewTx.funcNewTx()
	}
	mmNewTx.t.Fatalf("Unexpected call to TxCreatorMock.NewTx.")
	return
}

// NewTxAfterCounter returns a count of finished TxCreatorMock.NewTx invocations
func (mmNewTx *TxCreatorMock) NewTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTx.afterNewTxCounter)
}

// NewTxBeforeCounter returns a count of TxCreatorMock.NewTx invocations
func (mmNewTx *TxCreatorMock) NewTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewTx.beforeNewTxCounter)
}

// MinimockNewTxDone returns true if the count of the NewTx invocations corresponds
// the number of defined expectations
func (m *TxCreatorMock) MinimockNewTxDone() bool {
	for _, e := range m.NewTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewTxMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewTxCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewTx != nil && mm_atomic.LoadUint64(&m.afterNewTxCounter) < 1 {
		return false
	}
	return true
}

// MinimockNewTxInspect logs each unmet expectation
func (m *TxCreatorMock) MinimockNewTxInspect() {
	for _, e := range m.NewTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TxCreatorMock.NewTx")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewTxMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewTxCounter) < 1 {
		m.t.Error("Expected call to TxCreatorMock.NewTx")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewTx != nil && mm_atomic.LoadUint64(&m.afterNewTxCounter) < 1 {
		m.t.Error("Expected call to TxCreatorMock.NewTx")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TxCreatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNewTxInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TxCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TxCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewTxDone()
}
