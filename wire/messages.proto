syntax = "proto3";

package wire;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Handshake represents the first message between peers
message Handshake {
    string subVersion = 1;  // version of the client
}

// GetAddr is used to request for addresses from other peers
message GetAddr {
}

// GetAddrResponse is used to send addresses in response to a GetAddr
message Addr {
    repeated Address addresses = 1;  // list of addresses
}

message Address {
    string address = 1;
    int64 timestamp = 2;
}

// Ping represents a ping message
message Ping {
}

// Pong represents a pong message
message Pong {
}

// Reject is used to inform a node that its message was rejected
message Reject {
    string message = 1;
    int32 code = 2;
    string reason = 3;
    bytes extraData = 4;
}

// InvokeArgs describes a function to be executed by a blockode
message InvokeArgs {
    string func = 1;
    map<string,string> params = 2;
}

// Transaction represents a transaction
message Transaction {
    int64 type = 1;
    int64 nonce = 2;
    string to = 3;
    string senderPubKey = 4;
    string value = 5;
    int64 Timestamp = 6;
    string Fee = 7;
    InvokeArgs InvokeArgs = 8;
    bytes sig = 9;
}

// Header represents the header of a block
message Header {
    string ParentHash = 1;
    uint64 number = 2;
    string root = 3;
    bytes txHash = 4;
    uint64 nonce = 5;
    bytes mixHash = 6;
    string difficulty = 7;
    string timestamp = 8;
}

// Block represents an Ellcrys block (work in progress)
message Block{
    Header header = 1;
    repeated Transaction transactions = 2;
}

// ObjectState represents the new state of an account's object
message ObjectState {
    string prevHash = 1;
    string newAHash = 2;
    bytes value = 3;
}

// SignTxData represents information about a signed transaction, the signer
// and the affected state objects. 
message SignTxData {
    string pubKey = 1;
    bytes sig = 2;
    repeated ObjectState stateUpdates = 3;
}

// SignedTransaction represents a signed transaction
message SignedTransaction {
    Transaction tx = 1;
    SignTxData sigData = 2;
}

// BlockcodeObject represents objects belonging to a blockcode
message BlockcodeObject {
    bytes data = 1;
}

// BlockcodeData represent data belonging to a blockcode
message BlockcodeData {
    bytes byteCode = 1;
    map<string,BlockcodeObject> data = 2;    
}

// AccountData represents the data specific to a regular account
message AccountData {
    string balance = 1;
}

// GitBundle represents a git bundle
message GitBundle {
    string id = 1;
    repeated string commitIDs  = 2;
}

// RepoBundles represents a collection of git bundles.
message RepoBundles {
    repeated GitBundle bundles = 1;
}

// RepoData represents a git repository data
message RepoData {
    string balance = 1;
    map<string, RepoBundles> branches = 3;  
}

// Account represents an entity on the network.
message Account {
    int32 type = 1;
    string address = 2;
    string hash = 3;
    BlockcodeData blockcodeData = 4;
    AccountData  accountData = 5;
    RepoData repoData = 6;
}